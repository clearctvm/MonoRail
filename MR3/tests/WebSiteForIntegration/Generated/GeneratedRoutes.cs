//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebSiteForIntegration.Controllers {
    using System;
    using System.Web;
    using Castle.MonoRail;
    using Castle.MonoRail.Routing;
    using System.Runtime.InteropServices;
    
    
    public partial class HttpMethodRestrictionsController {
        
        public abstract class Urls {
            
            public abstract class Index : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("HttpMethodRestrictions", "Index"));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("HttpMethodRestrictions", "Index"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("HttpMethodRestrictions", "Index"));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("HttpMethodRestrictions", "Index"));
                }
            }
            
            public abstract class Index2 : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("HttpMethodRestrictions", "Index2"));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("HttpMethodRestrictions", "Index2"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("HttpMethodRestrictions", "Index2"));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("HttpMethodRestrictions", "Index2"));
                }
            }
            
            public abstract class Index3 : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("HttpMethodRestrictions", "Index3"));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("HttpMethodRestrictions", "Index3"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("HttpMethodRestrictions", "Index3"));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("HttpMethodRestrictions", "Index3"));
                }
            }
            
            public abstract class Index4 : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("HttpMethodRestrictions", "Index4"));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("HttpMethodRestrictions", "Index4"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("HttpMethodRestrictions", "Index4"));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("HttpMethodRestrictions", "Index4"));
                }
            }
        }
    }
    
    public partial class RootController {
        
        public abstract class Urls {
            
            public abstract class ActionWithRedirect : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "ActionWithRedirect"));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "ActionWithRedirect"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "ActionWithRedirect"));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "ActionWithRedirect"));
                }
            }
            
            public abstract class ActionWithRedirect2 : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "ActionWithRedirect2"));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "ActionWithRedirect2"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "ActionWithRedirect2"));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "ActionWithRedirect2"));
                }
            }
            
            public abstract class ActionWithRedirectPerm : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "ActionWithRedirectPerm"));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "ActionWithRedirectPerm"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "ActionWithRedirectPerm"));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "ActionWithRedirectPerm"));
                }
            }
            
            public abstract class ActionWithRedirectPerm2 : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "ActionWithRedirectPerm2"));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "ActionWithRedirectPerm2"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "ActionWithRedirectPerm2"));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "ActionWithRedirectPerm2"));
                }
            }
            
            public abstract class Index : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "Index"));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "Index"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "Index"));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "Index"));
                }
            }
            
            public abstract class LongRunning : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "LongRunning"));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "LongRunning"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "LongRunning"));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "LongRunning"));
                }
            }
            
            public abstract class LongRunning2 : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "LongRunning2"));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "LongRunning2"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "LongRunning2"));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "LongRunning2"));
                }
            }
            
            public abstract class LongRunning3 : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "LongRunning3"));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "LongRunning3"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "LongRunning3"));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "LongRunning3"));
                }
            }
            
            public abstract class LongRunning4 : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "LongRunning4"));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "LongRunning4"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "LongRunning4"));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "LongRunning4"));
                }
            }
            
            public abstract class ReplyWith304 : Castle.MonoRail.GeneratedUrlsBase {
                
                public static TargetUrl Get() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "ReplyWith304"));
                }
                
                public static TargetUrl Post() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "ReplyWith304"));
                }
                
                public static TargetUrl Delete() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "ReplyWith304"));
                }
                
                public static TargetUrl Put() {
                    return new Castle.MonoRail.RouteBasedTargetUrl(VirtualPath, CurrentRouter.Routes["default"], new Castle.MonoRail.UrlParameters("Root", "ReplyWith304"));
                }
            }
        }
    }
}
